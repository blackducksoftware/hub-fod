/**
 * hub-fod
 *
 * Copyright (C) 2017 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.
 *
 * The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.fod.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;

import com.blackducksoftware.integration.hub.model.view.VulnerabilityWithRemediationView;
import com.blackducksoftware.integration.hub.model.view.VulnerableComponentView;

/**
 * This class will be used to have the common methods related to Vulnerability
 *
 * @author smanikantan
 *
 */
public final class VulnerabilityUtil {

    /**
     * Group the vulnerability bom component hub response at component level
     *
     * @param vulnerabilities
     * @return
     */
    public static Map<String, List<VulnerabilityWithRemediationView>> groupByVulnerabilityByComponent(List<VulnerableComponentView> vulnerabilities) {
        Map<String, List<VulnerabilityWithRemediationView>> groupByVulnerabilityComponents = new HashMap<>();
        for (VulnerableComponentView vulnerability : vulnerabilities) {
            String key = vulnerability.componentVersionLink;
            if (groupByVulnerabilityComponents.containsKey(key)) {
                List<VulnerabilityWithRemediationView> vulnerabilityWithRemediationViews = groupByVulnerabilityComponents.get(key);
                vulnerabilityWithRemediationViews.add(vulnerability.vulnerabilityWithRemediation);
            } else {
                List<VulnerabilityWithRemediationView> vulnerabilityWithRemediationViews = new ArrayList<>();
                vulnerabilityWithRemediationViews.add(vulnerability.vulnerabilityWithRemediation);
                groupByVulnerabilityComponents.put(key, vulnerabilityWithRemediationViews);
            }
        }
        return groupByVulnerabilityComponents;
    }

    /**
     * Get the Vulnerability Remediation view by vulnerability name
     *
     * @param vulnerabilities
     * @param vulnerabiltyName
     * @return
     */
    public static VulnerabilityWithRemediationView getVulnerabilityRemediationView(List<VulnerabilityWithRemediationView> vulnerabilities,
            String vulnerabiltyName) {
        Predicate<VulnerabilityWithRemediationView> predicate = c -> c.vulnerabilityName.equalsIgnoreCase(vulnerabiltyName);
        return vulnerabilities.stream().filter(predicate).findFirst().get();
    }
}
