/**
 * hub-fod
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.fod.utils;

import static j2html.TagCreator.a;
import static j2html.TagCreator.div;
import static j2html.TagCreator.span;
import static j2html.TagCreator.table;
import static j2html.TagCreator.td;
import static j2html.TagCreator.tr;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.blackducksoftware.integration.hub.fod.HubFoDConfigProperties;
import com.blackducksoftware.integration.hub.fod.common.VulnerabilityReportConstants;
import com.blackducksoftware.integration.hub.model.view.ProjectVersionView;
import com.blackducksoftware.integration.hub.model.view.ProjectView;
import com.blackducksoftware.integration.hub.model.view.VulnerabilityWithRemediationView;
import com.blackducksoftware.integration.hub.model.view.VulnerableComponentView;

import j2html.attributes.Attr;
import j2html.tags.DomContent;
import j2html.tags.Tag;

@Component
public class VulnerabilityHTMLBuilder {
	
	private static final String VULNERABILITY_REPORT_SUMMARY = "[REPORT_SUMMARY]";
	private static final String VULNERABILITY_REPORT_COMPONENT_SUMMARY = "[REPORT_COMPONENT_SUMMARY]";
	private static final String VULNERABILITY_REPORT_DETAILS = "[REPORT_DETAILS]";
    private final static String HTML_VERSION_PHASE = "[VERSION_PHASE]";
    private final static String HTML_VERSION_DISTRO = "[VERSION_DISTRO]";
    private final static String HTML_VULNERABILITY_FILTER = "[VULNERABILITY_STATUS_FILTER]";
    private final static String HTML_PROJECT_VERSION = "[PROJECT_NAME_VERSION]";
    
    private final static String HTML_VULN_TABLE_HDR_NAME = "Vulnerability Name";
    private final static String HTML_VULN_TABLE_HDR_SEVERITY = "Severity";
    private final static String HTML_VULN_TABLE_HDR_BASE = "Base";
    private final static String HTML_VULN_TABLE_HDR_EXPLOIT = "Exploitability";
    private final static String HTML_VULN_TABLE_HDR_IMPACT = "Impact";
    private final static String HTML_VULN_TABLE_HDR_STATUS = "Status";
    private final static String HTML_VULN_TABLE_HDR_PUBLISHED = "Published";
    
    private final static String CSS_VULN_ROW_EVEN = "evenRow";
    private final static String CSS_VULN_ROW_ODD = "oddRow";
    
    private final static String CSS_SEVERITY_LOW = "severityLow";
    private final static String CSS_SEVERITY_MED = "severityMed";
    private final static String CSS_SEVERITY_HIGH = "severityHigh";
    
    private final static String VULN_URL_CONTEXT = "/#vulnerabilities/id:";
    
    private final static String VULN_STATUS_FILTER = "Vulnerability Status Filter: ";
    

	private String vulnerabilityReportHTML;
	   
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityHTMLBuilder.class);

	private final HubFoDConfigProperties appProps;
	
	// Constructor pre-populates with template
    @Autowired
    public VulnerabilityHTMLBuilder(HubFoDConfigProperties appProps) {
        this.appProps = appProps;
    }
	
	public String buildVulnerabilityHTML(ProjectView projectView, ProjectVersionView projectVersionView, List<VulnerableComponentView> vulnerableBomView)
	{
		
		try {
			logger.debug("RETRIEVING HTML TEMPLATE");
			
			this.setVulnerabilityReportHTML(this.getVulnerabilityHTMLTemplate());
		
			// Populate version info
			vulnerabilityReportHTML = vulnerabilityReportHTML.replace(HTML_VERSION_PHASE, projectVersionView.phase.toString());
			vulnerabilityReportHTML = vulnerabilityReportHTML.replace(HTML_VERSION_DISTRO, projectVersionView.distribution.toString());
			
			// create presentable filter text
			String vulnFilterText = appProps.getHubVulnerabilityFilters().length==0?"All Vulnerabilities":String.join(",", appProps.getHubVulnerabilityFilters());
			
			String vulnFilterValue = "" ;
			
			// Need to go thru each filter and capitalize and add underscores
			for(String vulnFilter : appProps.getHubVulnerabilityFilters())
			{
				vulnFilterValue += vulnFilter.toUpperCase().replace(" ", "_");
			}
			
			vulnerabilityReportHTML = vulnerabilityReportHTML.replace(HTML_VULNERABILITY_FILTER, vulnFilterText);	
			
			int highVulns = 0;
	        int medVulns = 0;
	        int lowVulns = 0;
	        int currentComponentHighs = 0;
	        int currentComponentMeds = 0;
	        int currentComponentLows = 0;
	        String severityCSS = CSS_SEVERITY_LOW;
	        String cssVulnRow = CSS_VULN_ROW_ODD;
	        String cssVulnSummaryRow = CSS_VULN_ROW_ODD;
	        List<DomContent> vulnDomContent = new ArrayList<>();
	        List<DomContent> componentVulnDomContent = new ArrayList<>();
	        List<DomContent> componentSummaryDomContent = new ArrayList<>();     
	        
	        //had to do for loop with index to peek into the future
	        for(int i=0;i<vulnerableBomView.size();i++)
	        {
	        	String currentComponent = vulnerableBomView.get(i).componentName.concat(" ").concat(vulnerableBomView.get(i).componentVersionName);
	        	
	        	VulnerabilityWithRemediationView vuln = vulnerableBomView.get(i).vulnerabilityWithRemediation;
	        	
	        	// Handle Status filters
	        	if(appProps.getHubVulnerabilityFilters().length==0 || vulnFilterValue.contains(vuln.remediationStatus))
	        	{
	      
		        	String severity = vuln.severity;
		        	
		        	switch (severity){
		        	case VulnerabilityReportConstants.SEVERITY_HIGH: 
		        		highVulns++;
		        		currentComponentHighs++;
		        		severityCSS = CSS_SEVERITY_HIGH;
		        		break;
		        	case VulnerabilityReportConstants.SEVERITY_MEDIUM: 
		        		medVulns++;
		        		currentComponentMeds++;
		        		severityCSS = CSS_SEVERITY_MED;
		        		break;
		        	case VulnerabilityReportConstants.SEVERITY_LOW: 
		        		lowVulns++;
		        		currentComponentLows++;
		        		severityCSS = CSS_SEVERITY_LOW;
		        		break;
		        	
		        	}
		        	
		        	//Add Vulnerability Details Row
		        	componentVulnDomContent.add(vulnerabilityDetailsRow(
		        			cssVulnRow,
		        			vuln.vulnerabilityName,
		        			appProps.getHubURL().concat(VULN_URL_CONTEXT),
		        			severity,
		        			severityCSS,
		        			vuln.baseScore,
		        			vuln.impactSubscore,
		        			vuln.exploitabilitySubscore,
		        			vuln.remediationStatus,
		        			vuln.vulnerabilityUpdatedDate
		        			));
		        	
		        	// Add Vulnerability Description Row
		        	componentVulnDomContent.add(vulnerabilityDescriptionRow(cssVulnRow, vuln.description));
		        	
		        	cssVulnRow = cssVulnRow.equalsIgnoreCase(CSS_VULN_ROW_ODD)?CSS_VULN_ROW_EVEN:CSS_VULN_ROW_ODD;
	       
	        	}
	        	
	        	// LAST ROW??
	        	boolean isLastRow = i+1==vulnerableBomView.size();
	        	String nextComponent = isLastRow
	        			?"LASTROW"
	        			:vulnerableBomView.get(i+1).componentName.concat(" ").concat(vulnerableBomView.get(i+1).componentVersionName);
	        		
        		//if the next component is new
	        	if(!nextComponent.equals(currentComponent))
	        	{
	        		//Only render if vulns were found (via filter)
	        		if(currentComponentHighs+currentComponentMeds+currentComponentLows>0)
	        		{
	                    //get license(s) and license types from JSON
		        		HashMap<String, String> license = HubFoDJsonParser.getVulnerableComponentLicense(vulnerableBomView.get(i).json);
		        		
		        		// Create a new Component Vuln Table Header
		        		componentVulnDomContent.add(0, vulnerabilityHeaderColumns());
		        		componentVulnDomContent.add(0, componentHeader(vulnerableBomView.get(i).componentName.concat(" ").concat(vulnerableBomView.get(i).componentVersionName),license));

		        		// Wrap the previous component up in a table and add to the overall vulnerability results
	        			vulnDomContent.add(populateVulnTable(componentVulnDomContent));
	        			
	        			cssVulnSummaryRow = cssVulnSummaryRow.equalsIgnoreCase(CSS_VULN_ROW_ODD)?CSS_VULN_ROW_EVEN:CSS_VULN_ROW_ODD;
	
	        			// Add Component Summary row
	        			componentSummaryDomContent.add(componentSummaryRow(cssVulnSummaryRow, currentComponent, 
	                				currentComponentHighs, currentComponentMeds, currentComponentLows));
	                	
	                	// Clear out the previous component vulns
	                	componentVulnDomContent.clear();
	                	
		        		// Reset vuln counts
	                    currentComponentHighs = 0;
	                    currentComponentMeds = 0;
	                    currentComponentLows = 0;
	        		}

		        }
	        		        
	        }
	        
	        // Insert Component Summary
	        vulnerabilityReportHTML = vulnerabilityReportHTML.replace(
	        		VULNERABILITY_REPORT_COMPONENT_SUMMARY,
	        		renderDomContentList(componentSummaryDomContent));
	        
	        
	        // Insert Vulnerability Tables
	        vulnerabilityReportHTML = vulnerabilityReportHTML.replace(
	        		VULNERABILITY_REPORT_DETAILS,
	        		renderDomContentList(vulnDomContent));
	        
	        String projectURL =  HubFoDJsonParser.getProjectHubUIURL(projectView.json);
	        String projectVersionURL = HubFoDJsonParser.getProjectVersionHubUIURL(projectVersionView.json);
	        
	        // Building the Vulnerability Summary Row (needed to do it after the for to total up vulns)
	       vulnerabilityReportHTML = vulnerabilityReportHTML.replace(
	    		   VULNERABILITY_REPORT_SUMMARY,
	    		   VulnerabilityHTMLBuilder.vulnerabilitySummary(projectView.name, 
	    			 projectURL, 
					 projectVersionView.versionName, 
					 projectVersionURL, 
					 String.valueOf(highVulns), 
					 String.valueOf(medVulns), 
					 String.valueOf(lowVulns)).render());
	       
	       // Create the global report notes summary
	       appProps.setReportNotes(appProps.getReportNotes()
	    		   + VulnerabilityReportConstants.REPORT_NOTES_SUMMARY
	    		   + String.valueOf(highVulns) + " " + VulnerabilityReportConstants.SEVERITY_HIGH + " - "
	    		   + String.valueOf(medVulns) + " " + VulnerabilityReportConstants.SEVERITY_MEDIUM + " - "
	    		   + String.valueOf(lowVulns) + " " + VulnerabilityReportConstants.SEVERITY_LOW + ". "
	    		   + VULN_STATUS_FILTER + vulnFilterText);
	       
	       
	       // Add the Project link to the disclaimer
	       vulnerabilityReportHTML = vulnerabilityReportHTML.replace(
	    		   HTML_PROJECT_VERSION,
	    		   VulnerabilityHTMLBuilder.projectVersionLink(projectView.name, 
	  	    			 projectURL, 
	  					 projectVersionView.versionName, 
	  					 projectVersionURL).render());
	        
			logger.debug("VULNERABILITY HTML BUILT");
	        return this.vulnerabilityReportHTML;
        
		} catch (IOException e) {
			logger.error("IOException occurred.");
			e.printStackTrace();
		} catch (URISyntaxException e) {
			logger.error("URISyntaxException occurred.");
			e.printStackTrace();
		}
		
		return null;
		
	}
	
	private String renderDomContentList(List<DomContent> doms)
	{
		String domHTML = "";
		
		for(DomContent dom : doms)
		{
			domHTML = domHTML.concat(dom.render());
		}
		
		return domHTML;
	}
	
	
	private static Tag<?> populateVulnTable(List<DomContent> vulnDomContent)
	{
		return table().withClass("vulnTable").with(vulnDomContent);
	}

	private static Tag<?> vulnerabilityHeaderColumns()
	{
		return tr().with(
				td().withClass("vulnColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_NAME),
				td().withClass("severityColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_SEVERITY),
				td().withClass("scoreColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_BASE),
				td().withClass("scoreColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_EXPLOIT),
				td().withClass("scoreColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_IMPACT),
				td().withClass("statusColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_STATUS),
				td().withClass("defaultColumn vulnHeader").withText(HTML_VULN_TABLE_HDR_PUBLISHED)
				);
	}
	
	private static Tag<?> projectVersionLink(String projectName, String projectURL, String versionName, String versionURL)
	{
		return span().with(
				a(projectName + " ").withHref(projectURL), 
				a(versionName).withHref(versionURL)
				);
	}
	
	private static Tag<?> vulnerabilitySummary(String projectName, String projectURL, String versionName, String versionURL, String totalHigh, String totalMedium, String totalLow)
	{
		return div().with(
					div().withClass("versionSummaryLargeLabel").with(
							a(projectName).withHref(projectURL)
							),
					div().withClass("versionSummaryLargeLabel").withText(">"),
					div().withClass("versionSummaryLargeLabel").with(
							a(versionName).withHref(versionURL)
							),
					div().withClass("severitySummary").with(
							div().withClass("severityDiv ".concat(CSS_SEVERITY_HIGH)).with(
									div().withClass("severityNumber").withText(totalHigh),
									div().withClass("severityLabel").withText("HIGH")
									),
							div().withClass("severityDiv ".concat(CSS_SEVERITY_MED)).with(
									div().withClass("severityNumber").withText(totalMedium),
									div().withClass("severityLabel").withText("MEDIUM")
									),
							div().withClass("severityDiv ".concat(CSS_SEVERITY_LOW)).with(
									div().withClass("severityNumber").withText(totalLow),
									div().withClass("severityLabel").withText("LOW")
									)
							)
					
					);
	}

	
	private static Tag<?> componentHeader(String componentNameVersion, HashMap<String, String> licenseMap)	
	{
		List<DomContent> licenseContent = new ArrayList<>();
		for (Map.Entry<String, String> license : licenseMap.entrySet()) {
			
			licenseContent.add(div()
							.withClass("license")
							.withText(license.getKey()+" ")
							.with(span()
									.withClass(license.getValue().toLowerCase())
									.withText("("+license.getValue().toLowerCase().replace("_", " ")+")")));
		}
		
		
		return tr().with(
				td()
				.withClass("componentHeader")
				.attr(Attr.COLSPAN, "7")
				.withText(componentNameVersion)
				.with(licenseContent)
			);
	}
	
	private DomContent componentSummaryRow(String cssRowClass, String componentName, int componentHighs, int componentMeds, int componentLows)
	{
	
		return div().withClass("componentSummaryTable".concat(" " + cssRowClass)).with(
				div().withClass("componentSummaryName").withText(componentName),
				div().withClass("severitySummary").with(
					div().withClass("componentSummarySeverityDiv componentSummarySeverityHigh").with(
							div().withClass("componentSummarySeverityNumber").withText(String.valueOf(componentHighs))
						),
					div().withClass("componentSummarySeverityDiv componentSummarySeverityMed").with(
							div().withClass("componentSummarySeverityNumber").withText(String.valueOf(componentMeds))
						),
					div().withClass("componentSummarySeverityDiv componentSummarySeverityLow").with(
							div().withClass("componentSummarySeverityNumber").withText(String.valueOf(componentLows))
						)
					)
				);
	}


	private DomContent vulnerabilityDetailsRow(String cssVulnRow, String vulnerabilityName, String vulnerabilityBaseURL, String severity, String severityCSS,
			double baseScore, double impactSubscore, double exploitabilitySubscore, String remediationStatus,
			Date vulnerabilityUpdatedDate)
	{
		DateFormat df = new SimpleDateFormat(VulnerabilityReportConstants.SIMPLE_DATE);
		
		return
				tr().withClass(cssVulnRow)
				.with(
					td().withClass("vulnColumn big").with(
							a(vulnerabilityName).withHref(vulnerabilityBaseURL.concat(vulnerabilityName))),
					td(severity).withClass("severityColumn ".concat(severityCSS)),
					td(String.valueOf(baseScore)).withClass("scoreColumn"),
					td(String.valueOf(impactSubscore)).withClass("scoreColumn"),
					td(String.valueOf(exploitabilitySubscore)).withClass("scoreColumn"),
					td(remediationStatus.replaceAll("_", " ")).withClass("statusColumn ".concat(remediationStatus.toLowerCase())),
					td(df.format(vulnerabilityUpdatedDate)).withClass("defaultColumn")
					);
	
	}
	
	private DomContent vulnerabilityDescriptionRow(String cssVulnRow, String description)
	{
		return	tr().withClass(cssVulnRow)
					.with(
						td()
						.withClass("descriptionColumn")
						.attr(Attr.COLSPAN, "7")
						.withText(description)
						);
		
	}
	
	private String getVulnerabilityHTMLTemplate() throws IOException, URISyntaxException{
	    	
		
		InputStream htmlTemplateStream = this.getClass().getClassLoader().getResourceAsStream(VulnerabilityReportConstants.RESOURCE_DIRECTORY.concat(
				VulnerabilityReportConstants.VULN_REPORT_HTML_TEMPLATE_NAME));
		
		
		String htmlTemplateString = IOUtils.toString(htmlTemplateStream, StandardCharsets.UTF_8);
		

		return htmlTemplateString; 

	}
	


	public String getVulnerabilityReportHTML() {
		return vulnerabilityReportHTML;
	}


	public void setVulnerabilityReportHTML(String vulnerabilityReportHTML) {
		this.vulnerabilityReportHTML = vulnerabilityReportHTML;
	}


}
