/**
 * hub-fod
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.fod.service;

import java.io.File;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blackducksoftware.integration.hub.api.generated.component.ProjectRequest;
import com.blackducksoftware.integration.hub.api.generated.view.ProjectVersionView;
import com.blackducksoftware.integration.hub.api.generated.view.ProjectView;
import com.blackducksoftware.integration.hub.api.generated.view.VulnerableComponentView;
import com.blackducksoftware.integration.hub.fod.HubFoDConfigProperties;
import com.blackducksoftware.integration.hub.fod.common.VulnerabilityReportConstants;
import com.blackducksoftware.integration.hub.fod.resource.VulnerabilityReportWriter;
import com.blackducksoftware.integration.hub.fod.utils.HubFodProjectVersionRequestBuilder;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityHTMLBuilder;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityPDFReportCreator;
import com.blackducksoftware.integration.hub.service.PhoneHomeService;
import com.blackducksoftware.integration.hub.service.ProjectService;
import com.blackducksoftware.integration.hub.service.model.ProjectRequestBuilder;
import com.blackducksoftware.integration.phonehome.PhoneHomeRequestBody.Builder;


@Service
public class VulnerabilityReportService {

    private final Logger appLog = LoggerFactory.getLogger(VulnerabilityReportService.class);

    @Autowired
    private final HubFoDConfigProperties configurationProperties;
    
    @Autowired
    HubRestConnectionService hubRestConnectionService;

    private ProjectService projectService;

    @Autowired
    VulnerabilityHTMLBuilder vulnHTMLBuilder;

    
    public VulnerabilityReportService(final HubFoDConfigProperties connectionProperties) {
        this.configurationProperties = connectionProperties;
    }

    public void createHubConnection() throws Exception {
       
          hubRestConnectionService.getBlackDuckConnection();
   
          if(configurationProperties.isPhoneHomeEnabled())
       {
    	   this.phoneHome();
       }

    }

    public void generateVulnerabilityReport() throws Exception {

        try {
        	
            projectService = hubRestConnectionService.getProjectService();
            final ProjectView projectView = projectService.getProjectByName(configurationProperties.getHubProject());

            final ProjectVersionView projectVersionView = projectService.getProjectVersion(projectView, configurationProperties.getHubProjectVersion());

            // If FoD application was not specified, see if mapping exists already
            if (configurationProperties.getFodApplicationId().isEmpty()) {
                // GET App Mapping via Request Comments / Notes to see if there is a project mapping
                final String hubVersionNotes = projectVersionView.releaseComments;

                if (hubVersionNotes != null) {
                    // See if there is a match
                    final String fodmapRegex = "\\(" + VulnerabilityReportConstants.HUB_NOTES_FOD_LABEL + "\\d+\\)";
                    final Pattern fodmapPattern = Pattern.compile(fodmapRegex);
                    final Matcher fodmapMatcher = fodmapPattern.matcher(hubVersionNotes);

                    if (fodmapMatcher.find()) {
                        final String fodmap = fodmapMatcher.group();
                        configurationProperties.setFodReleaseId(fodmap.substring(fodmap.indexOf("=") + 1,
                                fodmap.indexOf(")")));
                        
                        appLog.info("Black Duck + FoD Application mapping found. FoD Release ID=" + configurationProperties.getFodReleaseId());
                    }
                }
            }

            // Get the vulnerable components
            final List<VulnerableComponentView> vulnerableBomItems = projectService.getVulnerableComponentsForProjectVersion(projectVersionView);

            final String reportHTML = vulnHTMLBuilder.buildVulnerabilityHTML(projectView, projectVersionView, vulnerableBomItems);

            final VulnerabilityReportWriter writer = new VulnerabilityReportWriter();
            writer.createHtmlReportFiles(new File(configurationProperties.getOutputFolder()), reportHTML, configurationProperties.getOutputHTMLFilename());

            // Create the PDF
            VulnerabilityPDFReportCreator.generateVulnerabilityPDF(configurationProperties.getOutputFolder().concat("/").concat(configurationProperties.getOutputHTMLFilename()),
                    configurationProperties.getOutputFolder().concat("/").concat(configurationProperties.getOutputPDFFilename()));

        }

        catch (final Exception e) {
            appLog.error("Error trying to generate Vulnerability Report");
            e.printStackTrace();
            throw e;
        }

    }

    //Store the app mapping in the Hub notes field so we don't have to ask every time
    public void storeFodHubMapping(final String fodAppRelease) throws Exception {

        try {
            projectService = hubRestConnectionService.getProjectService();
           
            final ProjectView projectView = projectService.getProjectByName(configurationProperties.getHubProject());
            
            final ProjectVersionView projectVersionView = projectService.getProjectVersion(projectView, configurationProperties.getHubProjectVersion());
                 
            final ProjectRequestBuilder notesRequestBuilder = new HubFodProjectVersionRequestBuilder(projectView, projectVersionView, fodAppRelease);
            ProjectRequest notesRequest = notesRequestBuilder.build();
             
            projectService.updateProjectAndVersion(projectView, projectVersionView, notesRequest);

        }

        catch (final Exception e) {
            appLog.error("Error trying to store Hub FoD Mapping with message: " + e.getMessage() + "\n");
            throw e;
        }

    }
    
    public void phoneHome() {
    	
    	final PhoneHomeService phoneHome = hubRestConnectionService.getPhoneHomeDataService();
        final Builder phoneHomeReq = phoneHome.createInitialPhoneHomeRequestBodyBuilder("fortify-fod", VulnerabilityReportConstants.HUB_FOD_INTEGRATION_VERSION);
        phoneHomeReq.addToMetaData("Source", "Alliance Integrations");
        phoneHome.phoneHome(phoneHomeReq.build());
    	
    }
    
}
