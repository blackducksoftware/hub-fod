/**
 * hub-fod
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.fod.service;

import java.io.File;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blackducksoftware.integration.hub.api.generated.view.ProjectVersionView;
import com.blackducksoftware.integration.hub.api.generated.view.ProjectView;
import com.blackducksoftware.integration.hub.api.generated.view.VulnerableComponentView;
import com.blackducksoftware.integration.hub.configuration.HubServerConfigBuilder;
import com.blackducksoftware.integration.hub.fod.HubFoDConfigProperties;
import com.blackducksoftware.integration.hub.fod.common.AuthorizationResponse;
import com.blackducksoftware.integration.hub.fod.common.AuthorizationValidator;
import com.blackducksoftware.integration.hub.fod.common.VulnerabilityReportConstants;
import com.blackducksoftware.integration.hub.fod.domain.HubProjectVersion;
import com.blackducksoftware.integration.hub.fod.exception.HubConnectionException;
import com.blackducksoftware.integration.hub.fod.resource.VulnerabilityReportWriter;
import com.blackducksoftware.integration.hub.fod.utils.HubFoDJsonParser;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityHTMLBuilder;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityPDFReportCreator;
import com.blackducksoftware.integration.hub.request.Request;
import com.blackducksoftware.integration.hub.rest.RestConnection;
import com.blackducksoftware.integration.hub.service.HubService;
import com.blackducksoftware.integration.hub.service.PhoneHomeService;
import com.blackducksoftware.integration.hub.service.ProjectService;
import com.blackducksoftware.integration.hub.service.model.RequestFactory;
import com.blackducksoftware.integration.phonehome.PhoneHomeRequestBodyBuilder;
import com.blackducksoftware.integration.phonehome.enums.PhoneHomeSource;
import com.blackducksoftware.integration.phonehome.enums.ThirdPartyName;

@Service
public class VulnerabilityReportService {

    private final Logger appLog = LoggerFactory.getLogger(VulnerabilityReportService.class);

    private final HubFoDConfigProperties appProps;

    private ProjectService projectRequestService;

    private HubRestConnectionService connectionService;

    private HubService hubService;

    @Autowired
    VulnerabilityHTMLBuilder vulnHTMLBuilder;

    @Autowired
    public VulnerabilityReportService(final HubFoDConfigProperties appProps) {
        this.appProps = appProps;
    }

    public void createHubConnection() throws HubConnectionException {
        try {
            connectionService = new HubRestConnectionService(getHubConnection());
        } catch (final HubConnectionException hce) {
            appLog.error("HUB CONNECTION FAILED.  Please check the Hub URL, proxy information, username, and password and try again.");
            appLog.info("Hub URL=" + appProps.getHubURL());
            appLog.info("Hub username=" + appProps.getHubUser());

            throw (hce);
        }

        phoneHome();

    }

    public void generateVulnerabilityReport() throws Exception {

        try {
            if (connectionService == null) {
                connectionService = new HubRestConnectionService(getHubConnection());
            }

            projectRequestService = connectionService.getProjectRequestService();
            final ProjectView projectView = projectRequestService.getProjectByName(appProps.getHubProject());

            final ProjectVersionView projectVersionView = projectRequestService.getProjectVersion(projectView, appProps.getHubProjectVersion());

            // If FoD application was not specified, see if mapping exists already
            if (appProps.getFodApplicationId().isEmpty()) {
                // GET App Mapping via Request Comments / Notes to see if there is a project mapping
                final String hubVersionNotes = projectVersionView.releaseComments;

                if (hubVersionNotes != null) {
                    // See if there is a match
                    final String fodmapRegex = "\\(" + VulnerabilityReportConstants.HUB_NOTES_FOD_LABEL + "\\d+\\)";
                    final Pattern fodmapPattern = Pattern.compile(fodmapRegex);
                    final Matcher fodmapMatcher = fodmapPattern.matcher(hubVersionNotes);

                    if (fodmapMatcher.find()) {
                        final String fodmap = fodmapMatcher.group();
                        appProps.setFodReleaseId(fodmap.substring(fodmap.indexOf("=") + 1,
                                fodmap.indexOf(")")));

                        appLog.info("HUB+FoD MAPPING FOUND. FoD Release ID=" + appProps.getFodReleaseId());
                    }
                }
            }

            hubService = connectionService.getHubService();

            final Request.Builder requestBuilder = RequestFactory.createCommonGetRequestBuilder().addQueryParameter("limit", String.valueOf(500))
                    .mimeType("application/vnd.blackducksoftware.list-1+json");

            final List<VulnerableComponentView> vulnerableBomItems = hubService.getResponses(projectVersionView,
                    ProjectVersionView.VULNERABLE_COMPONENTS_LINK_RESPONSE, requestBuilder, true);

            final String reportHTML = vulnHTMLBuilder.buildVulnerabilityHTML(projectView, projectVersionView, vulnerableBomItems);

            final VulnerabilityReportWriter writer = new VulnerabilityReportWriter();
            writer.createHtmlReportFiles(new File(appProps.getOutputFolder()), reportHTML, appProps.getOutputHTMLFilename());

            // Create the PDF
            VulnerabilityPDFReportCreator.generateVulnerabilityPDF(appProps.getOutputFolder().concat("/").concat(appProps.getOutputHTMLFilename()),
                    appProps.getOutputFolder().concat("/").concat(appProps.getOutputPDFFilename()));

        }

        catch (final Exception e) {
            appLog.error("Error trying to generate Vulnerability Report");
            e.printStackTrace();
            throw e;
        }

    }

    public void storeFodHubMapping(final String fodAppRelease) throws Exception {

        try {
            if (connectionService == null) {
                connectionService = new HubRestConnectionService(getHubConnection());
            }
            projectRequestService = connectionService.getProjectRequestService();

            final ProjectView projectView = projectRequestService.getProjectByName(appProps.getHubProject());
            final ProjectVersionView projectVersionView = projectRequestService.getProjectVersion(projectView, appProps.getHubProjectVersion());

            final HubProjectVersion hubVersion = new HubProjectVersion();
            hubVersion.convertFromProjectView(projectVersionView);

            final StringBuilder sb = new StringBuilder(hubVersion.getReleaseComments());
            sb.append("(" + VulnerabilityReportConstants.HUB_NOTES_FOD_LABEL + fodAppRelease + ")");
            hubVersion.setReleaseComments(sb.toString());

            connectionService.updateProjectVersion(HubFoDJsonParser.getProjectVersionRestURL(projectVersionView.json), hubVersion);

        }

        catch (final Exception e) {
            appLog.error("Error trying to store Hub FoD Mapping with message: " + e.getMessage() + "\n");
            throw e;
        }

    }

    private RestConnection getHubConnection() throws HubConnectionException {

        final HubServerConfigBuilder hubServerConfigBuilder = new HubServerConfigBuilder();
        connectionService = new HubRestConnectionService();

        appLog.debug("GETTING HUB CONNECTION");

        final AuthorizationValidator validator = new AuthorizationValidator(connectionService, hubServerConfigBuilder);

        appLog.debug("VALIDATING Hub Credentials with: User=" + appProps.getHubUser() + " | URL=" + appProps.getHubURL() + " | ProxyUser=" +
                appProps.getProxyUsername() + " | ProxyPort=" + appProps.getProxyPort() + " | ProxyHost=" + appProps.getProxyHost() + " | IgnoreProxyHosts=" +
                appProps.getIgnoreProxyHosts() + " | Timeout=" + appProps.getHubTimeout());

        final AuthorizationResponse response = validator.validateCredentials(
                appProps.getHubUser(), appProps.getHubPassword(), appProps.getHubURL(),
                appProps.getProxyUsername(), appProps.getProxyPassword(), appProps.getProxyPort(), appProps.getProxyHost(),
                appProps.getIgnoreProxyHosts(), appProps.getHubTimeout());

        if (response.getConnection() != null) {
            appLog.debug("CONNECTED TO HUB");
            return response.getConnection();
        } else {

            appLog.debug("CONNECTION TO HUB FAILED.  Connection is null.");
            throw (new HubConnectionException("Hub Connection Failed."));
        }
    }

    private void phoneHome() {

        try {
            if (connectionService == null) {
                connectionService = new HubRestConnectionService(getHubConnection());
            }

            final PhoneHomeService phoneHomeDataService = connectionService.getPhoneHomeDataService();

            final PhoneHomeRequestBodyBuilder phoneHomeReq = phoneHomeDataService.createInitialPhoneHomeRequestBodyBuilder();
            phoneHomeReq.setSource(PhoneHomeSource.ALLIANCES);
            phoneHomeReq.setThirdPartyName(ThirdPartyName.FORTIFY_ON_DEMAND);
            phoneHomeReq.setThirdPartyVersion("N/A");
            phoneHomeReq.setPluginVersion(VulnerabilityReportConstants.HUB_FOD_INTEGRATION_VERSION);

            phoneHomeDataService.phoneHome(phoneHomeReq.build());

            appLog.debug("HUB-FOD PHONE HOME");

            // Don't let phone home errors break the program, just log errors
        } catch (final HubConnectionException hce) {
            appLog.error("Phone Home Hub Connection ERROR.", hce);

        }
    }

}
