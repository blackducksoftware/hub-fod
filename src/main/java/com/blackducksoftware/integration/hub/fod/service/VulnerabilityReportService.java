/**
 * hub-fod
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.fod.service;

import java.io.File;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blackducksoftware.integration.hub.api.project.ProjectRequestService;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionRequestService;
import com.blackducksoftware.integration.hub.api.vulnerablebomcomponent.VulnerableBomComponentRequestService;
import com.blackducksoftware.integration.hub.builder.HubServerConfigBuilder;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.fod.HubFoDConfigProperties;
import com.blackducksoftware.integration.hub.fod.common.AuthorizationResponse;
import com.blackducksoftware.integration.hub.fod.common.AuthorizationValidator;
import com.blackducksoftware.integration.hub.fod.common.VulnerabilityReportConstants;
import com.blackducksoftware.integration.hub.fod.domain.HubProjectVersion;
import com.blackducksoftware.integration.hub.fod.exception.HubConnectionException;
import com.blackducksoftware.integration.hub.fod.resource.VulnerabilityReportWriter;
import com.blackducksoftware.integration.hub.fod.utils.HubFoDJsonParser;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityHTMLBuilder;
import com.blackducksoftware.integration.hub.fod.utils.VulnerabilityPDFReportCreator;
import com.blackducksoftware.integration.hub.model.view.ProjectVersionView;
import com.blackducksoftware.integration.hub.model.view.ProjectView;
import com.blackducksoftware.integration.hub.model.view.VulnerableComponentView;
import com.blackducksoftware.integration.hub.rest.RestConnection;


@Service
public class VulnerabilityReportService {
	
	private final Logger appLog = LoggerFactory.getLogger(VulnerabilityReportService.class);
	
	private final HubFoDConfigProperties appProps;
	private ProjectRequestService projectRequestService;
	private ProjectVersionRequestService projectVersionRequestService;
	private VulnerableBomComponentRequestService vulnerableBomComponentRequestService;
	
	@Autowired
	VulnerabilityHTMLBuilder vulnHTMLBuilder;

	
    @Autowired
    public VulnerabilityReportService(HubFoDConfigProperties appProps) {
        this.appProps = appProps;
    }


	public void generateVulnerabilityReport() throws Exception
	{
		

		try {
			
			HubRestConnectionService connectionService = new HubRestConnectionService(getHubConnection());
			
			projectRequestService = connectionService.getProjectRequestService();
			ProjectView projectView = projectRequestService.getProjectByName(appProps.getHubProject());
			
			projectVersionRequestService = connectionService.getProjectVersionRequestService();
			
			ProjectVersionView projectVersionView = projectVersionRequestService.getProjectVersion(projectView, appProps.getHubProjectVersion());
			
			// If FoD application was not specified, see if mapping exists already 
			if(appProps.getFodApplicationId().isEmpty())
			{
				// GET App Mapping via Request Comments / Notes to see if there is a project mapping
				String hubVersionNotes = projectVersionView.getReleaseComments();
				
				// See if there is a match
				String fodmapRegex = "\\("+VulnerabilityReportConstants.HUB_NOTES_FOD_LABEL+"\\d+\\)";
				Pattern fodmapPattern = Pattern.compile(fodmapRegex);
				Matcher fodmapMatcher = fodmapPattern.matcher(hubVersionNotes);
				
				if(fodmapMatcher.find())
				{
					String fodmap = fodmapMatcher.group();
					appProps.setFodReleaseId(fodmap.substring(fodmap.indexOf("=")+1,
																fodmap.indexOf(")")));
					
					appLog.info("HUB+FoD MAPPING FOUND. FoD Release ID=" + appProps.getFodReleaseId());
					
				}
				
			}
			
			String vulnComponentsURL = HubFoDJsonParser.getVulnerableComponentsURL(projectVersionView.json);

	        vulnerableBomComponentRequestService = connectionService.getVulnerableBomComponentRequestService();
	        List<VulnerableComponentView> vulnerableBomItems = vulnerableBomComponentRequestService.getAllItems(vulnComponentsURL, VulnerableComponentView.class);   
	      
	        String reportHTML = vulnHTMLBuilder.buildVulnerabilityHTML(projectView, projectVersionView, vulnerableBomItems);
		  
		    VulnerabilityReportWriter writer = new VulnerabilityReportWriter();
		    writer.createHtmlReportFiles(new File(appProps.getOutputFolder()), reportHTML, appProps.getOutputHTMLFilename());
		 
		    //Create the PDF
		    VulnerabilityPDFReportCreator.generateVulnerabilityPDF(appProps.getOutputFolder().concat("/").concat(appProps.getOutputHTMLFilename()),
		    		appProps.getOutputFolder().concat("/").concat(appProps.getOutputPDFFilename()));
			
			
		} 
		
		catch (HubConnectionException hce) {
			appLog.error("HUB CONNECTION FAILED.  Please check the Hub URL, proxy information, username, and password and try again.");
			appLog.info("Hub URL="+appProps.getHubURL());
			appLog.info("Hub username="+appProps.getHubUser());
	
			throw(hce);
			
		}
		
		catch (Exception e) {
			appLog.error("Error trying to generate Vulnerability Report");
			e.printStackTrace();
			throw e;
		}
		
	}
	
	public void storeFodHubMapping(String fodAppRelease) throws Exception
	{
		
		try {
			
			HubRestConnectionService connectionService = new HubRestConnectionService(getHubConnection());
			
			projectRequestService = connectionService.getProjectRequestService();
			ProjectView projectView = projectRequestService.getProjectByName(appProps.getHubProject());
			
			projectVersionRequestService = connectionService.getProjectVersionRequestService();
			
			ProjectVersionView projectVersionView = projectVersionRequestService.getProjectVersion(projectView, appProps.getHubProjectVersion());
			
			HubProjectVersion hubVersion = new HubProjectVersion();
			hubVersion.convertFromProjectView(projectVersionView);
			
			StringBuilder sb = new StringBuilder(hubVersion.getReleaseComments());
			sb.append("("+VulnerabilityReportConstants.HUB_NOTES_FOD_LABEL + fodAppRelease+")");
			hubVersion.setReleaseComments(sb.toString());
							
			connectionService.updateProjectVersion(HubFoDJsonParser.getProjectVersionRestURL(projectVersionView.json), hubVersion);
			
		} 
		
		catch (Exception e) {
			appLog.error("Error trying to store Hub FoD Mapping with message: "+e.getMessage() +"\n");
			throw e;
		}
		
	}
	
	private RestConnection getHubConnection() throws HubIntegrationException, HubConnectionException {
	
        HubServerConfigBuilder hubServerConfigBuilder = new HubServerConfigBuilder();
        HubRestConnectionService connectionService = new HubRestConnectionService();
        
        AuthorizationValidator validator = new AuthorizationValidator(connectionService, hubServerConfigBuilder);
        
        appLog.debug("VALIDATING Hub Credentials with: User="+appProps.getHubUser()+" | URL="+appProps.getHubURL()+" | ProxyUser="+ 
        		appProps.getHubProxyUsername()+" | ProxyPort="+appProps.getHubProxyPort()+" | ProxyHost="+appProps.getHubProxyHost()+" | IgnoreProxyHosts="+
                appProps.getHubIgnoreProxyHosts()+" | Timeout="+ appProps.getHubTimeout());
        
        AuthorizationResponse response = validator.validateCredentials(
        		appProps.getHubUser(), appProps.getHubPassword(), appProps.getHubURL(), 
        		appProps.getHubProxyUsername(), appProps.getHubProxyPassword(), appProps.getHubProxyPort(), appProps.getHubProxyHost(),
                appProps.getHubIgnoreProxyHosts(), appProps.getHubTimeout());
        
        if (response.getConnection() != null) {
        	appLog.debug("CONNECTED TO HUB");
            return response.getConnection();
        } else {
        	
        	appLog.debug("CONNECTION TO HUB FAILED.  Connection is null.");      	
        	throw(new HubConnectionException("Hub Connection Failed."));
        }
    }

}
